Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"

//takes in a string, outputs repeating characters compressed into numbers

Input: "aaabccdddda"

Output: "3ab2c4da"

const compressedString = (string) => {
  let str = string.split('');
  let result = "";
  let counter = 1;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === str[i+1]) {
      counter++;
    } else {
      if (counter === 1) {
      result += str[i];  
      } else {
        result += counter.toString() + str[i];
        counter = 1;
      }
    }
  }
  return result;
}

// DID NOT GET TO RECURSION =(